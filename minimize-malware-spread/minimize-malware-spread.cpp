class Solution {
public:
    long long int par[301], sz[301];
    
    int find(int a){
        if(par[a]==a) return a;
        return par[a]=find(par[a]);
    }
    
    void uni(int a, int b){
        a=find(a);
        b=find(b);
        if(a==b) return;
        if(sz[b]<sz[a]) swap(a,b);
        par[a]=b;
        sz[b]+=sz[a];
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& ini) {
        int n=graph.size();
        for(int i=0;i<n;i++) par[i]=i, sz[i]=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]) uni(i,j);
            }
        }
        
        int mal[n+1];
        memset(mal,0,sizeof mal);
        // int ar[n+1];
        
        for(auto it: ini) mal[find(it)]++;
        
        vector<long long int> res = {1,0};
        
        for(auto it: ini){
            res= min(res, {(-sz[find(it)])*(mal[find(it)]==1), it});
        }
        return res[1];
    }
};